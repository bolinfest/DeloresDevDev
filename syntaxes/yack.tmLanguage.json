{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Yack",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#knot"
    },
    {
      "include": "#divert"
    },
    {
      "include": "#comment"
    },
    {
      "include": "#actor-line"
    },
    {
      "include": "#choice"
    },
    {
      "include": "#func-call"
    },
    {
      "include": "#dinky"
    },
    {
      "include": "#condition"
    },
    {
      "include": "#builtins"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.yack",
          "match": "\\b(if|else|endif)\\b"
        }
      ]
    },
    "knot": {
      "comment": "ink-style knot: https://www.inklestudios.com/ink/",
      "begin": "^={2,}",
      "end": "={2,}",
      "beginCaptures": {
        "0": { "name": "entity.name.variable" }
      },
      "endCaptures": {
        "0": { "name": "entity.name.variable" }
      },
      "patterns": [{ "include": "#knot_name" }]
    },
    "knot_name": {
      "comment": "valid name for a knot (can start with a number)",
      "match": "[a-zA-Z0-9_]+",
      "name": "entity.name.tag"
    },
    "divert": {
      "comment": "single-line instruction to jump to a knot",
      "match": "(->) (\\w+)\\b",
      "captures": {
        "1": {
          "name": "keyword.control.divert"
        },
        "2": {
          "patterns": [{ "include": "#knot_name" }]
        }
      }
    },
    "actor-line": {
      "comment": "line spoken by actor",
      "match": "^\\s*(\\w+):",
      "captures": {
        "1": {
          "patterns": [{ "include": "#actor-name" }]
        }
      }
    },
    "actor-name": {
      "name": "entity.name.type",
      "match": "[a-z][a-zA-Z]+"
    },
    "choice": {
      "comment": "start of a choice in a dialog tree",
      "match": "^([1-9][0-9]*) ",
      "name": "keyword.control"
    },
    "literal": {
      "patterns": [
        { "include": "#strings" },
        { "include": "#integer" },
        { "include": "#positive-float" }
      ]
    },
    "dinky": {
      "comment": "Block of Dinky code: not supported yet.",
      "begin": "\\{",
      "end": "\\}",
      "patterns": [{ "include": "#literal" }]
    },
    "func-call": {
      "begin": "([a-zA-Z_][a-zA-Z0-9_]*)\\(",
      "end": "\\)",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function"
        }
      },
      "patterns": [{ "include": "#literal" }, { "include": "$self" }]
    },
    "comment": {
      "patterns": [
        { "match": "//(.*)$", "name": "comment.line" },
        { "match": "^##(.*)$", "name": "comment.line" }
      ]
    },
    "condition": {
      "comment": "Condition that can be a literal such as '[once]' or contain Dinky code",
      "begin": "\\[",
      "end": "\\]",
      "beginCaptures": {
        "0": {
          "name": "punctuation.condition.begin"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.condition.end"
        }
      },
      "patterns": [{ "include": "#literal" }]
    },
    "strings": {
      "name": "string.quoted.double.yack",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.yack",
          "match": "\\\\."
        }
      ]
    },
    "integer": {
      "patterns": [
        {
          "comment": "integer without a leading 0",
          "match": "\\b[1-9][0-9]*(?!\\.)\\b",
          "name": "constant.numeric.yack"
        },
        {
          "comment": "integer that is just 0",
          "match": "\\b0(?!\\.)\\b",
          "name": "constant.numeric.yack"
        }
      ]
    },
    "positive-float": {
      "comment": "admittedly, this is a weak regex for a float, but it supports what we see in practice in .yack files",
      "name": "constant.numeric.yack",
      "match": "\\b[0-9]+\\.[0-9]+\\b"
    },
    "builtins": {
      "comment": "built-in macros that do not follow Dinky-style calling conventions",
      "patterns": [
        { "include": "#parrot-builtin" },
        { "include": "#pause-builtin" },
        { "include": "#waitfor-builtin" }
      ]
    },
    "parrot-builtin": {
      "match": "^\\s*(parrot)\\s+(YES|NO)$",
      "captures": {
        "1": {
          "name": "entity.name.operator"
        },
        "2": {
          "name": "constant.language.boolean"
        }
      }
    },
    "pause-builtin": {
      "begin": "^\\s*(pause) ",
      "end": "$",
      "beginCaptures": {
        "1": {
          "name": "entity.name.operator"
        }
      },
      "patterns": [{ "include": "#positive-float" }]
    },
    "waitfor-builtin": {
      "match": "^\\s*(waitfor) (\\w+)$",
      "captures": {
        "1": {
          "name": "entity.name.operator"
        },
        "2": {
          "patterns": [{ "include": "#actor-name" }]
        }
      }
    }
  },
  "scopeName": "source.yack"
}
